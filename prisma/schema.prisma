// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  phone       String       @unique
  email       String?      @unique
  address     String
  records     Record[]
  appointments Appointment[]
  invoices    Invoice[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Appointment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  time        String
  type        Type     @default(CHECK_UP)
  status      Status   @default(SCHEDULED)
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Type {
  FOLLOW_UP
  CONSULTATION
  CHECK_UP
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELED
}

model Invoice {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime
  amount      Decimal
  description String
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Record {
  id          Int      @id @default(autoincrement())
  medicalHistory String
  currentMedications String
  allergies    String
  lastVisit    DateTime?
  nextAppointment DateTime?
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}